---
server.js:

const cp = require('cookie-parser');
server.use(cp());
const authenticate = require('./api/middleware/authenticated.js');
server.get('*', (req, res) => {
    
    if (authenticate(req)) {
        if (req.path === "/") {
            res.sendFile(path.join(__dirname, "../restrictedClient/build", "index.html"));
        }
        else {
            res.sendFile(path.join(__dirname, "../restrictedClient/build", decodeURI(req.path)));
        }
    }
    else {
        server.use(express.static('../publicClient'));
        res.sendFile(path.join(__dirname, "../publicClient", "index.html"))
    }
})

---
authenticated.js:

const path = require('path');
module.exports = (req) => {
    if (req.cookies && req.cookies.auth && jwt.verify(req.cookies.auth, process.env.JWT_SECRET)) {
        return true;
    }
    else {
        return false;
    }
};

---
userRouter.js:

router.post("/login", async (req, res) => {
    try {
        const username = req.body.user || "incorrect";
        const password = req.body.pass || "invalid";
        const authorized = await User.login({ username, password });
        if (authorized) {
            res.cookie('auth', jwt.sign({ user: req.body.user }, process.env.JWT_SECRET)).redirect('/');
        }
    }
    catch (error) {
        console.log(error);
        throw error;
    }
});

router.post("/logout", (req, res) => {
    res.clearCookie('auth');
})

router.use('/register', [
    require('./middleware/validPassword.js'),
    require('./middleware/validEmail.js'),
    require('./middleware/validUsername.js')
]);

router.post('/register', async (req, res) => {
    const { username, email, password } = req.body;
    if (!username || !email || !password) {
        res.status(400).json({ error: "to create an account you must provide a username, email address, and password" })
    }
    else {
        try {
            res.status(200).json({message: "user created!"})
        }
        catch (error) {
            res.status(500).json({error: "error creating user"})
        }
    }
})


---
userModel.js:

const db = require('../data/db.js');
const bcrypt = require('bcryptjs');
const create = async (userObject) => {
    try {
        return db('users').insert(userObject).returning('id');
    }
    catch (error) {
        throw error;
    }
}
const login = async (loginObject) => {
    try {
        const { username, password } = loginObject;
        const user = await db('users').where({ username }).first();
        if (user) {
            if (bcrypt.compareSync(password, user.password)) {
                console.log('correct password');
                return (true);
            }
            else {
                console.log('incorrect password');
                return (false);
            }
        }
        else {
            console.log('no such user');
            return (false);
        }
    }
    catch (error) {
        console.log(error);
        return (false);
    }
}

module.exports = { create, login }